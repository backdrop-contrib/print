<?php

/**
 * @file
 * Install, update and uninstall functions for the print_pdf module.
 *
 * @ingroup print
 */

/**
 * Implements hook_enable().
 */
function print_pdf_enable() {
  // Module weight.
  db_update('system')
    ->fields(array(
    'weight' => 2,
  ))
    ->condition('type', 'module')
    ->condition('name', 'print_pdf')
    ->execute();
}

/**
 * Implements hook_uninstall().
 */
function print_pdf_uninstall() {
  config_clear('print_pdf.settings', 'print_pdf_autoconfig');
  config_clear('print_pdf.settings', 'print_pdf_cache_enabled');
  config_clear('print_pdf.settings', 'print_pdf_cache_lifetime');
  config_clear('print_pdf.settings', 'print_pdf_content_disposition');
  config_clear('print_pdf.settings', 'print_pdf_display_sys_urllist');
  config_clear('print_pdf.settings', 'print_pdf_filename');
  config_clear('print_pdf.settings', 'print_pdf_images_via_file');
  config_clear('print_pdf.settings', 'print_pdf_link_text');
  config_clear('print_pdf.settings', 'print_pdf_link_text_enabled');
  config_clear('print_pdf.settings', 'print_pdf_page_orientation');
  config_clear('print_pdf.settings', 'print_pdf_paper_size');
  config_clear('print_pdf.settings', 'print_pdf_pdf_tool');

  config_clear('print_pdf.settings', 'print_pdf_book_link');
  config_clear('print_pdf.settings', 'print_pdf_link_class');
  config_clear('print_pdf.settings', 'print_pdf_link_pos');
  config_clear('print_pdf.settings', 'print_pdf_link_teaser');
  config_clear('print_pdf.settings', 'print_pdf_link_use_alias');
  config_clear('print_pdf.settings', 'print_pdf_show_link');
  config_clear('print_pdf.settings', 'print_pdf_sys_link_pages');
  config_clear('print_pdf.settings', 'print_pdf_sys_link_visibility');

  $settings = db_query("SELECT name FROM {variable} WHERE name LIKE 'print\_pdf\_display\_%'");
  foreach ($settings as $variable) {
    // TODO This variable was probably removed in Backdrop without replacement.
    variable_del($variable->name);
  }
}

/**
 * Implements hook_schema().
 */
function print_pdf_schema() {
  $schema['print_pdf_node_conf'] = array(
    'description' => 'PDF version node-specific configuration settings',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The {node}.nid of the node.',
      ),
      'link' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Show link',
      ),
      'comments' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Show link in individual comments',
      ),
      'url_list' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Show Printer-friendly URLs list',
      ),
      'size' => array(
        'type' => 'varchar',
        'length' => 9,
        'description' => 'Paper size',
      ),
      'orientation' => array(
        'type' => 'varchar',
        'length' => 9,
        'description' => 'Page orientation',
      ),
    ),
    'primary key' => array('nid'),
  );

  $schema['print_pdf_page_counter'] = array(
    'description' => 'PDF version access counter',
    'fields' => array(
      'path' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Page path',
      ),
      'totalcount' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'big',
        'description' => 'Number of page accesses',
      ),
      'timestamp' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Last access',
      ),
    ),
    'primary key' => array('path'),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function print_pdf_requirements($phase) {
  $config = config('print_pdf.settings');
  $requirements = array();
  $t = get_t();
  switch ($phase) {
    // At runtime, make sure that a PDF generation tool is selected.
    case 'runtime':
      $print_pdf_pdf_tool = $config->get('print_pdf_pdf_tool');
      if (empty($print_pdf_pdf_tool)) {
        $requirements['print_pdf_tool'] = array(
          'title' => $t('Printer, email and PDF versions - PDF generation library'),
          'value' => $t('No PDF tool selected'),
          'description' => $t('Please configure it in the !url.', array('!url' => l($t('PDF settings page'), 'admin/config/user-interface/print/pdf'))),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      else {
        // Tool is defined, get some data from it's handler module.
        $tool = explode('|', $print_pdf_pdf_tool);
        $function = $tool[0] . '_pdf_tool_info';
        $info = function_exists($function) ? $function() : array();

        // Is the file there?
        if (!is_file($tool[1]) || !is_readable($tool[1])) {
          $requirements['print_pdf_tool'] = array(
            'title' => $t('Printer, email and PDF versions - PDF generation library'),
            'value' => $t('File not found'),
            'description' => $t('The currently selected PDF generation library (%file) is no longer accessible.', array('%file' => $tool[1])),
            'severity' => REQUIREMENT_ERROR,
          );
        }
        else {
          // Get the version number.
          $function = $tool[0] . '_pdf_tool_version';
          if (function_exists($function)) {
            $version = $function($tool[1]);

            if (isset($info['min_version']) && version_compare($version, $info['min_version'], '<')) {
              $requirements['print_pdf_tool_version'] = array(
                'title' => $t('Printer, email and PDF versions - PDF generation library'),
                'value' => $t('Unsupported %lib version', array('%lib' => $info['name'])),
                'description' => $t('The currently selected version of %lib (@version) is not supported. Please update to !url.', array(
                  '%lib' => $info['name'],
                  '@version' => $version,
                  '!url' => l($t('version @min or newer', array('@min' => $info['min_version'])), $info['url']),
                )),
                'severity' => REQUIREMENT_ERROR,
              );
            }
            else {
              $requirements['print_pdf_tool_version'] = array(
                'title' => $t('Printer, email and PDF versions - PDF generation library'),
                'value' => $info['name'] . ' ' . $version,
              );
            }
          }
        }

        // If auto-config is on, check for write access to the appropriate dirs.
        if ($config->get('print_pdf_autoconfig')) {
          $directories = array();
          if (isset($info['public_dirs'])) {
            foreach ($info['public_dirs'] as $dir) {
              $directories[] = 'public://print_pdf/' . $tool[0] . '/' . $dir;
            }
          }
          if (isset($info['tool_dirs'])) {
            foreach ($info['tool_dirs'] as $dir) {
              $directories[] = dirname($tool[1]) . '/' . $dir;
            }
          }

          foreach ($directories as $dir) {
            if (!is_dir($dir) || !is_writable($dir)) {
              $requirements['print_pdf_tool_' . $dir] = array(
                'title' => $t('%lib directory', array('%lib' => $info['name'])),
                'value' => $t('Non-writable permissions'),
                'description' => $t('You must change the %libdir permissions to be writable, as %lib requires write-access to that directory.', array('%lib' => $info['name'], '%libdir' => $dir)),
                'severity' => REQUIREMENT_ERROR,
              );
            }
          }
        }
      }
      break;
  }
  return $requirements;
}

/**
 * Implements hook_update_last_removed().
 */
function print_pdf_update_last_removed() {
  return 7205;
}

/**
 * Implements hook_update_N().
 */
function print_pdf_update_1000() {
  $config = config('print_pdf.settings');
  $config->set('print_pdf_pdf_tool', update_variable_get('print_pdf_pdf_tool', 'PRINT_PDF_PDF_TOOL_DEFAULT'));
  $config->set('print_pdf_content_disposition', update_variable_get('print_pdf_content_disposition', 'PRINT_PDF_CONTENT_DISPOSITION_DEFAULT'));
  $config->set('print_pdf_paper_size', update_variable_get('print_pdf_paper_size', 'PRINT_PDF_PAPER_SIZE_DEFAULT'));
  $config->set('print_pdf_page_orientation', update_variable_get('print_pdf_page_orientation', 'PRINT_PDF_PAGE_ORIENTATION_DEFAULT'));
  $config->set('print_pdf_cache_enabled', update_variable_get('print_pdf_cache_enabled', 'PRINT_PDF_CACHE_ENABLED_DEFAULT'));
  $config->set('print_pdf_cache_lifetime', update_variable_get('print_pdf_cache_lifetime', 'PRINT_PDF_CACHE_LIFETIME_DEFAULT'));
  $config->set('print_pdf_images_via_file', update_variable_get('print_pdf_images_via_file', 'PRINT_PDF_IMAGES_VIA_FILE_DEFAULT'));
  $config->set('print_pdf_autoconfig', update_variable_get('print_pdf_autoconfig', 'PRINT_PDF_AUTOCONFIG_DEFAULT'));
  $config->set('print_pdf_filename', update_variable_get('print_pdf_filename', 'PRINT_PDF_FILENAME_DEFAULT'));
  $config->set('print_pdf_display_sys_urllist', update_variable_get('print_pdf_display_sys_urllist', 'PRINT_TYPE_SYS_URLLIST_DEFAULT'));
  $config->set('print_pdf_link_text_enabled', update_variable_get('print_pdf_link_text_enabled', 'PRINT_TYPE_LINK_TEXT_ENABLED_DEFAULT'));
  //$config->set('print_pdf_link_text', update_variable_get('print_pdf_link_text', 'dynamic value in file /print/print_pdf/print_pdf.admin.inc line 144'));
  //$config->set('print_pdf_link_pos', update_variable_get('print_pdf_link_pos', 'dynamic value in file /print/print_pdf/print_pdf.install line 286'));
  update_variable_del('print_pdf_pdf_tool');
  update_variable_del('print_pdf_content_disposition');
  update_variable_del('print_pdf_paper_size');
  update_variable_del('print_pdf_page_orientation');
  update_variable_del('print_pdf_cache_enabled');
  update_variable_del('print_pdf_cache_lifetime');
  update_variable_del('print_pdf_images_via_file');
  update_variable_del('print_pdf_autoconfig');
  update_variable_del('print_pdf_filename');
  update_variable_del('print_pdf_display_sys_urllist');
  update_variable_del('print_pdf_link_text_enabled');
  //update_variable_del('print_pdf_link_text');
  //update_variable_del('print_pdf_link_pos');
}
