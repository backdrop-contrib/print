<?php

/**
 * @file
 * Install, update and uninstall functions for the print_epub module.
 *
 * @ingroup print
 */

/**
 * Implements hook_enable().
 */
function print_epub_enable() {
  // Module weight.
  db_update('system')
    ->fields(array(
    'weight' => 4,
  ))
    ->condition('type', 'module')
    ->condition('name', 'print_epub')
    ->execute();
}

/**
 * Implements hook_uninstall().
 */
function print_epub_uninstall() {
  config_clear('print_epub.settings', 'print_epub_display_sys_urllist');
  config_clear('print_epub.settings', 'print_epub_filename');
  config_clear('print_epub.settings', 'print_epub_images_via_file');
  config_clear('print_epub.settings', 'print_epub_link_text');
  config_clear('print_epub.settings', 'print_epub_link_text_enabled');
  config_clear('print_epub.settings', 'print_epub_epub_tool');

  config_clear('print_epub.settings', 'print_epub_book_link');
  config_clear('print_epub.settings', 'print_epub_link_class');
  config_clear('print_epub.settings', 'print_epub_link_pos');
  config_clear('print_epub.settings', 'print_epub_link_teaser');
  config_clear('print_epub.settings', 'print_epub_link_use_alias');
  config_clear('print_epub.settings', 'print_epub_show_link');
  config_clear('print_epub.settings', 'print_epub_sys_link_pages');
  config_clear('print_epub.settings', 'print_epub_sys_link_visibility');
}


/**
 * Implements hook_requirements().
 */
function print_epub_requirements($phase) {
  $requirements = array();
  $t = get_t();
  switch ($phase) {
    // At runtime, make sure that a EPUB generation tool is selected.
    case 'runtime':
      $print_epub_epub_tool = config_get('print_epub.settings', 'print_epub_epub_tool');
      if (empty($print_epub_epub_tool)) {
        $requirements['print_epub_tool'] = array(
          'title' => $t('Printer, email and EPUB versions - EPUB generation library'),
          'value' => $t('No EPUB tool selected'),
          'description' => $t('Please configure it in the !url.', array('!url' => l($t('EPUB settings page'), 'admin/config/user-interface/print/epub'))),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      else {
        $tool = explode('|', $print_epub_epub_tool);

        if (!is_file($tool[1]) || !is_readable($tool[1])) {
          $requirements['print_epub_tool'] = array(
            'title' => $t('Printer, email and EPUB versions - EPUB generation library'),
            'value' => $t('File not found'),
            'description' => $t('The currently selected EPUB generation library (%file) is no longer accessible.', array('%file' => $tool[1])),
            'severity' => REQUIREMENT_ERROR,
          );
        }
      }
      break;
  }
  return $requirements;
}

/**
 * Implements hook_schema().
 */
function print_epub_schema() {
  $schema['print_epub_node_conf'] = array(
    'description' => 'EPUB version node-specific configuration settings',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The {node}.nid of the node.',
      ),
      'link' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Show link',
      ),
      'comments' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Show link in individual comments',
      ),
      'url_list' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Show Printer-friendly URLs list',
      ),
    ),
    'primary key' => array('nid'),
  );

  $schema['print_epub_page_counter'] = array(
    'description' => 'EPUB version access counter',
    'fields' => array(
      'path' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Page path',
      ),
      'totalcount' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'big',
        'description' => 'Number of page accesses',
      ),
      'timestamp' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Last access',
      ),
    ),
    'primary key' => array('path'),
  );

  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function print_epub_update_last_removed() {
  return 7203;
}

/**
 * Implements hook_update_N().
 */
function print_epub_update_1000() {
  $config = config('print_epub.settings');
  $config->set('print_epub_epub_tool', update_variable_get('print_epub_epub_tool', 0));
  $config->set('print_epub_images_via_file', update_variable_get('print_epub_images_via_file', 0));
  $config->set('print_epub_filename', update_variable_get('print_epub_filename', '[site:name] - [node:title] - [node:changed:custom:Y-m-d]'));
  $config->set('print_epub_display_sys_urllist', update_variable_get('print_epub_display_sys_urllist', 0));
  $config->set('print_epub_link_text_enabled', update_variable_get('print_epub_link_text_enabled', 0));
  $config->set('print_epub_link_text', update_variable_get('print_epub_link_text', 'Epub version'));
  $config->set('print_epub_link_pos', update_variable_get('print_epub_link_pos', array('link' => 'link')));
  update_variable_del('print_epub_epub_tool');
  update_variable_del('print_epub_images_via_file');
  update_variable_del('print_epub_filename');
  update_variable_del('print_epub_display_sys_urllist');
  update_variable_del('print_epub_link_text_enabled');
  update_variable_del('print_epub_link_text');
  update_variable_del('print_epub_link_pos');
}

/**
 * Implements hook_install().
 */
function print_epub_install() {
  // Dynamically generated variable data was detected.
  // /print/print_epub/print_epub.admin.inc line 82
  // /print/print_epub/print_epub.install line 179
}
